.in-prplmesh-builder:
  image:
    name: prplfoundationinc/prplmesh-builder:ubuntu-18.04
    entrypoint: [""]
  tags:
    - docker

clang-format:
  extends: .in-prplmesh-builder
  stage: build
  script:
    # Run clang-format and check there are no modified files
    - ./clang-format.sh
    # `diff-index` doesn't update the index so doesn't actually see changes. Need to manually update index.
    - git update-index -q --refresh
    # Use `diff-index` instead of `status` or `diff` because it gives more predictable output and exit code.
    - |
      git diff-index --exit-code HEAD || {
        ret=$?
        echo "Inconsistent formatting, please apply patch from artifacts"
        git diff > correct-formatting.patch
        exit $?
      }
  artifacts:
    paths:
      - correct-formatting.patch

build-in-docker:
  extends: .in-prplmesh-builder
  stage: build
  variables:
    CMAKE_BUILD_TYPE: "Release"
  script:
    - cmake -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCMAKE_INSTALL_PREFIX=build/install -H. -Bbuild -G Ninja
    - ninja -C build install
    # Check that the AutoGenerated files are correct by checking git status
    - git update-index -q --refresh
    - git diff-index --exit-code HEAD
  artifacts:
    paths:
      - build/install

build-in-docker-alpine:
  extends: build-in-docker
  image: prplfoundationinc/prplmesh-builder:alpine-3.11.3
  only:
    - schedules

.run-test-in-docker:
  stage: test
  extends: .in-prplmesh-builder
  script:
    - cd build/install
    - ./bin/tests/${CI_JOB_NAME}
  needs:
    - job: build-in-docker

tlvf_test:
  extends: .run-test-in-docker

run-tests:
  stage: test
  image: $CI_REGISTRY_IMAGE/tests-runner:18.09.7-dind
  script:
    # Try to pull from dockerhub, if it fails, the run should fail
    - tools/docker/image-pull.sh
    - tests/test_flows.sh -v -u $RANDOM

  artifacts:
    paths:
      - logs
    when: always

  tags:
    - docker
    - docker-build

  after_script:
    - tools/docker/stop.sh -k -r
  needs:
    - job: build-in-docker

.build-for-openwrt:
  stage: build
  script:
    - mkdir -p "build/$TARGET_DEVICE"
    - tools/docker/builder/openwrt/build.sh -v -d "$TARGET_DEVICE" -t "prplmesh-builder-$TARGET_DEVICE:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID" 2>&1 | tee "build/$TARGET_DEVICE/openwrt-build.log" | grep -E '^[[:blank:]]?make\[[12]\]|^Step|^ --->' --color=never --line-buffered
  after_script:
    - |
      max_days=30
      repository="prplmesh-builder-$TARGET_DEVICE"
      # get all the image ids with the corresponding repository (no matter what the tag is):
      image_ids="$(docker images --filter=reference="$repository:*" -q | sort | uniq)"
      if [ ! "$?" ] ; then
        echo No image found, nothing to do.
        exit 0
      fi
      for i in $image_ids ; do
        # last time image was used:
        image_time="$(docker inspect "$i" --format='{{ .Metadata.LastTagTime.Unix }}')"
        # time elapsed since last tags (in seconds):
        time_since_last_tag="$(( $(date +%s) - image_time ))"
        if [ "$time_since_last_tag" -gt $((3600*24*max_days)) ] ; then
          echo "Image with id $i is older than $max_days days and will be deleted."
          # get all the tags associated to the image id:
          tags_to_delete="$(docker image inspect "$i" --format='{{join .RepoTags " "}}')"
          echo "The image has the following tags:"
          echo -e "$(echo $tags_to_delete | tr ' ' '\n')"
          # tags_to_delete is guaranteed to be non-empty since we found it using a tag
          docker rmi $tags_to_delete
        fi
      done
  artifacts:
    paths:
      - "build/$TARGET_DEVICE/*.ipk"
      - "build/$TARGET_DEVICE/openwrt-build.log"
    when: always
  tags:
    - shell
    - docker-build

.test-on-target:
  stage: test
  before_script:
    # we need a list of all the targets to be able to kill them
    - ALL_TARGETS="turris-omnia-1 glinet-b1300-1 netgear-rax40-1"
    # kill prplmesh on each target to make sure they don't interfere with the test
    - for i in $ALL_TARGETS ; do ssh "$i" 'pgrep -f beerocks | xargs kill -9 2>/dev/null' || true ; done
  script:
    - tools/deploy_ipk.sh $TARGET_DEVICE_NAME "build/$TARGET_DEVICE/"*.ipk
    - tests/openwrt/test_status.sh $TARGET_DEVICE_NAME
  artifacts:
    paths:
      - ${TARGET_DEVICE_NAME}_logs.tar.gz
      - ${TARGET_DEVICE_NAME}_diags.log
    when: always
  tags:
    - targets

build-for-turris-omnia:
  extends: .build-for-openwrt
  variables:
    TARGET_DEVICE: "turris-omnia"

build-for-glinet-b1300:
  extends: .build-for-openwrt
  variables:
    TARGET_DEVICE: "glinet-b1300"

build-for-netgear-rax40:
  extends: .build-for-openwrt
  variables:
    TARGET_DEVICE: "netgear-rax40"

test-on-turris-omnia:
  extends: .test-on-target
  variables:
    TARGET_DEVICE: turris-omnia
    TARGET_DEVICE_NAME: turris-omnia-1
  needs: ["build-for-turris-omnia"]

test-on-glinet-b1300:
  extends: .test-on-target
  variables:
    TARGET_DEVICE: glinet-b1300
    TARGET_DEVICE_NAME: glinet-b1300-1
  needs: ["build-for-glinet-b1300"]

test-on-netgear-rax40:
  extends: .test-on-target
  variables:
    TARGET_DEVICE: netgear-rax40
    TARGET_DEVICE_NAME: netgear-rax40-1
  needs: ["build-for-netgear-rax40"]

.run-certification-tests:
  stage: test
  variables:
    # TESTS_TO_RUN needs to be set by the user (or the pipeline schedule)
    GIT_CLONE_PATH: "/builds/prpl-foundation/prplMesh/"
    # device to test with: prplmesh for dummy bwl, prplmesh-rax40 for dwpal on rax40
    DEVICE_UNDER_TEST: prplmesh
  script:
      - |
        if [ "$DEVICE_UNDER_TEST" != prplmesh ] ; then
            echo "Deploying to $DEVICE_UNDER_TEST"
            tools/deploy_ipk.sh $DEVICE_UNDER_TEST build/$DEVICE_UNDER_TEST/*.ipk
        fi
      - /easymesh_cert/run_test_file.sh -o logs -d $DEVICE_UNDER_TEST $TESTS_TO_RUN
  artifacts:
    paths:
      - logs
    when: always
  needs:
    - job: build-in-docker
    - job: build-for-netgear-rax40
  tags:
    - certs-tests
  timeout: 24h

scheduled-certification-tests:
  extends: .run-certification-tests
  only:
    - schedules

manual-certification-tests:
  extends: .run-certification-tests
  when: manual
